// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/v1/pirem_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PiRemServiceClient is the client API for PiRemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PiRemServiceClient interface {
	// devices
	SendIr(ctx context.Context, in *SendIrRequest, opts ...grpc.CallOption) (*SendIrResponse, error)
	ReceiveIr(ctx context.Context, in *ReceiveIrRequest, opts ...grpc.CallOption) (*IrData, error)
	ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error)
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	// remotes
	CreateRemote(ctx context.Context, in *CreateRemoteRequest, opts ...grpc.CallOption) (*Remote, error)
	ListRemotes(ctx context.Context, in *ListRemotesRequest, opts ...grpc.CallOption) (*ListRemotesResponse, error)
	GetRemote(ctx context.Context, in *GetRemoteRequest, opts ...grpc.CallOption) (*Remote, error)
	UpdateRemote(ctx context.Context, in *UpdateRemoteRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteRemote(ctx context.Context, in *DeleteRemoteRequest, opts ...grpc.CallOption) (*Empty, error)
	// buttons
	GetButton(ctx context.Context, in *GetButtonRequest, opts ...grpc.CallOption) (*Button, error)
	LearnIrData(ctx context.Context, in *LearnIrDataRequest, opts ...grpc.CallOption) (*Empty, error)
	PushButton(ctx context.Context, in *PushButtonRequest, opts ...grpc.CallOption) (*Empty, error)
	// irdata
	GetIrData(ctx context.Context, in *GetIrDataRequest, opts ...grpc.CallOption) (*GetIrDataResponse, error)
}

type piRemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPiRemServiceClient(cc grpc.ClientConnInterface) PiRemServiceClient {
	return &piRemServiceClient{cc}
}

func (c *piRemServiceClient) SendIr(ctx context.Context, in *SendIrRequest, opts ...grpc.CallOption) (*SendIrResponse, error) {
	out := new(SendIrResponse)
	err := c.cc.Invoke(ctx, "/pirem.PiRemService/SendIr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piRemServiceClient) ReceiveIr(ctx context.Context, in *ReceiveIrRequest, opts ...grpc.CallOption) (*IrData, error) {
	out := new(IrData)
	err := c.cc.Invoke(ctx, "/pirem.PiRemService/ReceiveIr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piRemServiceClient) ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error) {
	out := new(ListDevicesResponse)
	err := c.cc.Invoke(ctx, "/pirem.PiRemService/ListDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piRemServiceClient) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/pirem.PiRemService/GetDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piRemServiceClient) CreateRemote(ctx context.Context, in *CreateRemoteRequest, opts ...grpc.CallOption) (*Remote, error) {
	out := new(Remote)
	err := c.cc.Invoke(ctx, "/pirem.PiRemService/CreateRemote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piRemServiceClient) ListRemotes(ctx context.Context, in *ListRemotesRequest, opts ...grpc.CallOption) (*ListRemotesResponse, error) {
	out := new(ListRemotesResponse)
	err := c.cc.Invoke(ctx, "/pirem.PiRemService/ListRemotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piRemServiceClient) GetRemote(ctx context.Context, in *GetRemoteRequest, opts ...grpc.CallOption) (*Remote, error) {
	out := new(Remote)
	err := c.cc.Invoke(ctx, "/pirem.PiRemService/GetRemote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piRemServiceClient) UpdateRemote(ctx context.Context, in *UpdateRemoteRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pirem.PiRemService/UpdateRemote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piRemServiceClient) DeleteRemote(ctx context.Context, in *DeleteRemoteRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pirem.PiRemService/DeleteRemote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piRemServiceClient) GetButton(ctx context.Context, in *GetButtonRequest, opts ...grpc.CallOption) (*Button, error) {
	out := new(Button)
	err := c.cc.Invoke(ctx, "/pirem.PiRemService/GetButton", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piRemServiceClient) LearnIrData(ctx context.Context, in *LearnIrDataRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pirem.PiRemService/LearnIrData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piRemServiceClient) PushButton(ctx context.Context, in *PushButtonRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pirem.PiRemService/PushButton", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piRemServiceClient) GetIrData(ctx context.Context, in *GetIrDataRequest, opts ...grpc.CallOption) (*GetIrDataResponse, error) {
	out := new(GetIrDataResponse)
	err := c.cc.Invoke(ctx, "/pirem.PiRemService/GetIrData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PiRemServiceServer is the server API for PiRemService service.
// All implementations must embed UnimplementedPiRemServiceServer
// for forward compatibility
type PiRemServiceServer interface {
	// devices
	SendIr(context.Context, *SendIrRequest) (*SendIrResponse, error)
	ReceiveIr(context.Context, *ReceiveIrRequest) (*IrData, error)
	ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error)
	GetDevice(context.Context, *GetDeviceRequest) (*Device, error)
	// remotes
	CreateRemote(context.Context, *CreateRemoteRequest) (*Remote, error)
	ListRemotes(context.Context, *ListRemotesRequest) (*ListRemotesResponse, error)
	GetRemote(context.Context, *GetRemoteRequest) (*Remote, error)
	UpdateRemote(context.Context, *UpdateRemoteRequest) (*Empty, error)
	DeleteRemote(context.Context, *DeleteRemoteRequest) (*Empty, error)
	// buttons
	GetButton(context.Context, *GetButtonRequest) (*Button, error)
	LearnIrData(context.Context, *LearnIrDataRequest) (*Empty, error)
	PushButton(context.Context, *PushButtonRequest) (*Empty, error)
	// irdata
	GetIrData(context.Context, *GetIrDataRequest) (*GetIrDataResponse, error)
	mustEmbedUnimplementedPiRemServiceServer()
}

// UnimplementedPiRemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPiRemServiceServer struct {
}

func (UnimplementedPiRemServiceServer) SendIr(context.Context, *SendIrRequest) (*SendIrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendIr not implemented")
}
func (UnimplementedPiRemServiceServer) ReceiveIr(context.Context, *ReceiveIrRequest) (*IrData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveIr not implemented")
}
func (UnimplementedPiRemServiceServer) ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (UnimplementedPiRemServiceServer) GetDevice(context.Context, *GetDeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedPiRemServiceServer) CreateRemote(context.Context, *CreateRemoteRequest) (*Remote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRemote not implemented")
}
func (UnimplementedPiRemServiceServer) ListRemotes(context.Context, *ListRemotesRequest) (*ListRemotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRemotes not implemented")
}
func (UnimplementedPiRemServiceServer) GetRemote(context.Context, *GetRemoteRequest) (*Remote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemote not implemented")
}
func (UnimplementedPiRemServiceServer) UpdateRemote(context.Context, *UpdateRemoteRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRemote not implemented")
}
func (UnimplementedPiRemServiceServer) DeleteRemote(context.Context, *DeleteRemoteRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRemote not implemented")
}
func (UnimplementedPiRemServiceServer) GetButton(context.Context, *GetButtonRequest) (*Button, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetButton not implemented")
}
func (UnimplementedPiRemServiceServer) LearnIrData(context.Context, *LearnIrDataRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LearnIrData not implemented")
}
func (UnimplementedPiRemServiceServer) PushButton(context.Context, *PushButtonRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushButton not implemented")
}
func (UnimplementedPiRemServiceServer) GetIrData(context.Context, *GetIrDataRequest) (*GetIrDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIrData not implemented")
}
func (UnimplementedPiRemServiceServer) mustEmbedUnimplementedPiRemServiceServer() {}

// UnsafePiRemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PiRemServiceServer will
// result in compilation errors.
type UnsafePiRemServiceServer interface {
	mustEmbedUnimplementedPiRemServiceServer()
}

func RegisterPiRemServiceServer(s grpc.ServiceRegistrar, srv PiRemServiceServer) {
	s.RegisterService(&PiRemService_ServiceDesc, srv)
}

func _PiRemService_SendIr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendIrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiRemServiceServer).SendIr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pirem.PiRemService/SendIr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiRemServiceServer).SendIr(ctx, req.(*SendIrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiRemService_ReceiveIr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveIrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiRemServiceServer).ReceiveIr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pirem.PiRemService/ReceiveIr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiRemServiceServer).ReceiveIr(ctx, req.(*ReceiveIrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiRemService_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiRemServiceServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pirem.PiRemService/ListDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiRemServiceServer).ListDevices(ctx, req.(*ListDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiRemService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiRemServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pirem.PiRemService/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiRemServiceServer).GetDevice(ctx, req.(*GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiRemService_CreateRemote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRemoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiRemServiceServer).CreateRemote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pirem.PiRemService/CreateRemote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiRemServiceServer).CreateRemote(ctx, req.(*CreateRemoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiRemService_ListRemotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRemotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiRemServiceServer).ListRemotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pirem.PiRemService/ListRemotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiRemServiceServer).ListRemotes(ctx, req.(*ListRemotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiRemService_GetRemote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRemoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiRemServiceServer).GetRemote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pirem.PiRemService/GetRemote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiRemServiceServer).GetRemote(ctx, req.(*GetRemoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiRemService_UpdateRemote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRemoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiRemServiceServer).UpdateRemote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pirem.PiRemService/UpdateRemote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiRemServiceServer).UpdateRemote(ctx, req.(*UpdateRemoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiRemService_DeleteRemote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRemoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiRemServiceServer).DeleteRemote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pirem.PiRemService/DeleteRemote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiRemServiceServer).DeleteRemote(ctx, req.(*DeleteRemoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiRemService_GetButton_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetButtonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiRemServiceServer).GetButton(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pirem.PiRemService/GetButton",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiRemServiceServer).GetButton(ctx, req.(*GetButtonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiRemService_LearnIrData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LearnIrDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiRemServiceServer).LearnIrData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pirem.PiRemService/LearnIrData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiRemServiceServer).LearnIrData(ctx, req.(*LearnIrDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiRemService_PushButton_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushButtonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiRemServiceServer).PushButton(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pirem.PiRemService/PushButton",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiRemServiceServer).PushButton(ctx, req.(*PushButtonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiRemService_GetIrData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIrDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiRemServiceServer).GetIrData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pirem.PiRemService/GetIrData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiRemServiceServer).GetIrData(ctx, req.(*GetIrDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PiRemService_ServiceDesc is the grpc.ServiceDesc for PiRemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PiRemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pirem.PiRemService",
	HandlerType: (*PiRemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendIr",
			Handler:    _PiRemService_SendIr_Handler,
		},
		{
			MethodName: "ReceiveIr",
			Handler:    _PiRemService_ReceiveIr_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _PiRemService_ListDevices_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _PiRemService_GetDevice_Handler,
		},
		{
			MethodName: "CreateRemote",
			Handler:    _PiRemService_CreateRemote_Handler,
		},
		{
			MethodName: "ListRemotes",
			Handler:    _PiRemService_ListRemotes_Handler,
		},
		{
			MethodName: "GetRemote",
			Handler:    _PiRemService_GetRemote_Handler,
		},
		{
			MethodName: "UpdateRemote",
			Handler:    _PiRemService_UpdateRemote_Handler,
		},
		{
			MethodName: "DeleteRemote",
			Handler:    _PiRemService_DeleteRemote_Handler,
		},
		{
			MethodName: "GetButton",
			Handler:    _PiRemService_GetButton_Handler,
		},
		{
			MethodName: "LearnIrData",
			Handler:    _PiRemService_LearnIrData_Handler,
		},
		{
			MethodName: "PushButton",
			Handler:    _PiRemService_PushButton_Handler,
		},
		{
			MethodName: "GetIrData",
			Handler:    _PiRemService_GetIrData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/pirem_service.proto",
}
